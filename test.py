import os
from docx import Document
from docx.oxml.ns import qn

# üî∑ –®–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏
folder_path = r"C:\Users\1\Desktop\–ö–ù-41 ‚Äì –∫–æ–ø—ñ—è"

# üîÅ –°–ø–∏—Å–æ–∫ –∑–∞–º—ñ–Ω (—Ç–µ–∫—Å—Ç –±—É–¥–µ –≤–∏–¥–∞–ª–µ–Ω–æ)
replacements = {
    "8.–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£ –°–ò–°–¢–ï–ú–£ –í–ò–©–û–á –û–°–í–Ü–¢–ò": "",
}
# replacements = {
#     "6.2.4 Further information sources": "6.2.5 Further information sources",
# }
# replacements = {
#     "–êccess to study for a Bachelor's Professional pre-higher education educational-professional degree": "–êccess to study for a Bachelor's Professional Degree",
# }
# üîÑ –ó–∞–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ —Ç–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ä–æ–∑—Ä–∏–≤—É —Ä–æ–∑–¥—ñ–ª—É –ø—ñ—Å–ª—è –Ω—å–æ–≥–æ
def replace_and_clean_after(doc):
    paragraphs = doc.paragraphs
    i = 0
    while i < len(paragraphs):
        paragraph = paragraphs[i]
        text = paragraph.text
        for old, new in replacements.items():
            if old in text:
                # –ó–∞–º—ñ–Ω–∞ —Ç–µ–∫—Å—Ç—É
                new_text = text.replace(old, new)
                for run in paragraph.runs:
                    run.text = ''
                if paragraph.runs:
                    paragraph.runs[0].text = new_text
                else:
                    paragraph.add_run(new_text)

                # üîΩ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞ –ø—ñ—Å–ª—è –∑–∞–º—ñ–Ω–∏
                if i + 1 < len(paragraphs):
                    next_p = paragraphs[i + 1]
                    p_elem = next_p._element

                    # –Ø–∫—â–æ –ø–æ—Ä–æ–∂–Ω—ñ–π ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
                    if next_p.text.strip() == "":
                        p_elem.getparent().remove(p_elem)
                        paragraphs.pop(i + 1)
                        continue  # –ù–µ —ñ–Ω–∫—Ä–µ–º–µ–Ω—Ç—É—î–º–æ i

                    # –Ø–∫—â–æ —î —Ä–æ–∑—Ä–∏–≤ —Ä–æ–∑–¥—ñ–ª—É ‚Äî –≤–∏–¥–∞–ª—è—î–º–æ
                    for child in p_elem.iterchildren():
                        if child.tag == qn('w:pPr'):
                            for sub in list(child):
                                if sub.tag == qn('w:sectPr'):
                                    child.remove(sub)
                                    break
        i += 1

# üîÑ –û–±—Ä–æ–±–∫–∞ —Ç–∞–±–ª–∏—Ü—å (–∑–∞–º—ñ–Ω–∞ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—ñ—Å–ª—è)
def process_tables(doc):
    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                replace_and_clean_after(cell)

# üîÅ –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
def process_doc(file_path):
    doc = Document(file_path)
    replace_and_clean_after(doc)
    process_tables(doc)
    doc.save(file_path)
    print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {os.path.basename(file_path)}")

# üöÄ –û–±—Ö—ñ–¥ —É—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
for filename in os.listdir(folder_path):
    if filename.endswith('.docx') and not filename.startswith('~$'):
        process_doc(os.path.join(folder_path, filename))

print("üéâ –ì–æ—Ç–æ–≤–æ! –ó–∞–º—ñ–Ω–∏ —Ç–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω—ñ.")
