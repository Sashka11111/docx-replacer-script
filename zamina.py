import os
import re
import shutil
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Pt, RGBColor, Inches
from docxcompose.composer import Composer

# üî∑ –®–ª—è—Ö–∏
folder_path = r"C:\Users\1\Desktop\–ó–í-41"
dyploma_path = r"C:\Users\1\Desktop\dyploma.docx"

# üîÑ –ó–∞–º—ñ–Ω–∏
replacements = {
    '–ù–∞–∑–≤–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å': '–ù–∞–∑–≤–∞ –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π –æ—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å (–º–æ–≤–æ—é –æ—Ä–∏–≥—ñ–Ω–∞–ª—É)',
    'Name of qualification and (if applicable) title conferred': 'Name of educational qualification and educational-professional degree conferred (in original language)',
    '–°—Ç—É–ø—ñ–Ω—å –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏': '–û—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Degree': 'Professional pre-higher education educational-professional degree',
    '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ä–∞–∑—ñ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è)': '–û—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞',
    'Professional Qualification (if awarded)': 'Educational-professional programme',
    '–§–∞—Ö—ñ–≤–µ—Ü—å –∑ –≥–µ–æ–¥–µ–∑—ñ—ó —Ç–∞ –∑–µ–º–ª–µ—É—Å—Ç—Ä–æ—é': '',
    'Specialist in geodesy and land management': '',
    '–û—Å–Ω–æ–≤–Ω–∞ (–æ—Å–Ω–æ–≤–Ω—ñ) –≥–∞–ª—É–∑—å (–≥–∞–ª—É–∑—ñ) –∑–Ω–∞–Ω—å –∑–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ä–∞–∑—ñ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è)',
    'Main field(s) of study for the qualification': 'Professional qualification (if awarded)',
    '19 –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —Ç–∞ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ': '–§–∞—Ö—ñ–≤–µ—Ü—å –∑ –≥–µ–æ–¥–µ–∑—ñ—ó —Ç–∞ –∑–µ–º–ª–µ—É—Å—Ç—Ä–æ—é',
    '19 Architecture and Construction': 'Specialist in geodesy and land management',
    '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —ñ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–ª–∞–¥—É (—è–∫—â–æ –≤—ñ–¥–º—ñ–Ω–Ω—ñ –≤—ñ–¥ –ø. 2.3), —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É': '',
    'Name and status of institution (if different from 2.3)': '',
    'administering studies': '',
    '–ó–∞–∑–Ω–∞—á–µ–Ω–æ —É –ø—É–Ω–∫—Ç—ñ 2.3': '',
    'Specified in 2.3': '',
    '2.5': '2.4',
    '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –†–Ü–í–ï–ù–¨ –ö–í–ê–õ–Ü–§–Ü–ö–ê–¶–Ü–á –Ü –¢–†–ò–í–ê–õ–Ü–°–¢–¨ –á–á –ó–î–û–ë–£–¢–¢–Ø': '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ö–í–ê–õ–Ü–§–Ü–ö–ê–¶–Ü–Æ –Ü –¢–†–ò–í–ê–õ–Ü–°–¢–¨ –á–á –ó–î–û–ë–£–¢–¢–Ø',
    '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö —Ç–∞/–∞–±–æ —Ä–æ–∫–∞—Ö': '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö —Ç–∞/–∞–±–æ —Ä–æ–∫–∞—Ö',
    'Official duration of programme in credits and/or years': 'Official length of educational-professional programme in credits and/or years',
    '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–í–ï–†–®–ï–ù–£ –û–°–í–Ü–¢–ù–Æ –ü–†–û–ì–†–ê–ú–£ –¢–ê –ó–î–û–ë–£–¢–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ù–ê–í–ß–ê–ù–ù–Ø': '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–í–ï–†–®–ï–ù–£ –û–°–í–Ü–¢–ù–¨–û-–ü–†–û–§–ï–°–Ü–ô–ù–£ –ü–†–û–ì–†–ê–ú–£ –¢–ê –ó–î–û–ë–£–¢–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ù–ê–í–ß–ê–ù–ù–Ø',
    'INFORMATION ON THE PROGRAMME COMPLETED AND THE RESULTS OBTAINED': 'INFORMATION ON THE COMPLETED EDUCATIONAL-PROFESSIONAL PROGRAMME AND LEARNING OUTCOMES',
    '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–∏—Ö —É—Å—Ç–∞–Ω–æ–≤) (–≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤...)': '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –∞–±–æ —Ñ—ñ–ª—ñ–π...)',
    'Name of all higher education (research) institutions (separate structural units of higher education institutions)...': 'Names of all professional pre-higher education institutions... (academic mobility programme)',
    '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∏)': '–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (—ñ–Ω—à–æ–≥–æ —Å—É–±‚Äô—î–∫—Ç–∞ –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ)',
    'Contact information of the higher education (research) institution': 'Contact information of the professional pre-higher education institution (other educational entity)',
    '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –∞–±–æ —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∞ –æ—Å–æ–±–∞ –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏': '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –∞–±–æ —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∞ –æ—Å–æ–±–∞ –∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Capacity': 'Head or other authorized person of professional pre-higher education institution',
    '–ü–æ—Å–∞–¥–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∞–±–æ —ñ–Ω—à–æ—ó —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ—ó –æ—Å–æ–±–∏ –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∏)': '–ü–æ—Å–∞–¥–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∞–±–æ —ñ–Ω—à–æ—ó —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ—ó –æ—Å–æ–±–∏ –∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Position of the Head or another authorized person of the Higher Education (Research) Institution': 'Position of the professional pre-higher education institution head or other authorized person',
    '–ü–µ—á–∞—Ç–∫–∞': '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –ø–µ—á–∞—Ç–∫–∞',
    'Official stamp or seal': 'Official Seal',
    '8. –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£ –°–ò–°–¢–ï–ú–£ –í–ò–©–û–á –û–°–í–Ü–¢–ò': '',
    '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–ò–°–¢–ï–ú–£ –§–ê–•–û–í–û–á –ü–ï–†–ï–î–í–ò–©–û–á –û–°–í–Ü–¢–ò': '',
}

keys_to_format = [
    '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –ø–µ—á–∞—Ç–∫–∞',
    'Official Seal',
]
no_line_break_keys = keys_to_format

def replace_text_in_paragraph(paragraph, doc):
    # –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü—É —Ç–∞ —Å–ø–∏—Å–æ–∫ runs –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
    runs = paragraph.runs
    if not runs:
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–∑–∞—Ü–∏

    full_text = ''.join(run.text for run in runs).strip()
    if not full_text:
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –ø–æ—Ä–æ–∂–Ω—ñ –∞–±–∑–∞—Ü–∏

    changed = False
    needs_formatting = False
    for old, new in replacements.items():
        if re.search(r'\b' + re.escape(old) + r'\b', full_text):
            if new == '':
                # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ –∞–±–∑–∞—Ü–∏, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è –∑ "4.3" –∞–±–æ "4.4"
                if full_text.startswith("4.3") or full_text.startswith("4.4"):
                    continue
                # –í–∏–¥–∞–ª—è—î–º–æ –∞–±–∑–∞—Ü, —è–∫—â–æ –∑–∞–º—ñ–Ω—é—î–º–æ –Ω–∞ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ç–µ–∫—Å—Ç
                paragraph._element.getparent().remove(paragraph._element)
                return False

            full_text = full_text.replace(old, new)
            changed = True
            if old in keys_to_format or new in keys_to_format:
                needs_formatting = True

    if changed:
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ run (—à—Ä–∏—Ñ—Ç, —Ä–æ–∑–º—ñ—Ä, –∫–æ–ª—ñ—Ä —Ç–æ—â–æ)
        first_run = runs[0]
        font_name = first_run.font.name
        font_size = first_run.font.size
        font_bold = first_run.font.bold
        font_italic = first_run.font.italic
        font_color = first_run.font.color.rgb if first_run.font.color and first_run.font.color.rgb else None

        # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ runs
        for run in runs:
            run.text = ''

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç —ñ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è–º —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
        new_run = paragraph.add_run(full_text)
        new_run.font.name = font_name
        new_run.font.size = font_size
        new_run.font.bold = font_bold
        new_run.font.italic = font_italic
        if font_color:
            new_run.font.color.rgb = font_color

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if needs_formatting and full_text not in no_line_break_keys:
            paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    return True

def replace_text_in_cell(cell, doc):
    for paragraph in cell.paragraphs:
        replace_text_in_paragraph(paragraph, doc)

def delete_after_section(doc):
    pattern = re.compile(r'–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø\s*–ü–†–û\s*–ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£\s*–°–ò–°–¢–ï–ú–£\s*–í–ò–©–û–á', re.IGNORECASE | re.UNICODE)
    start_index = None
    for i, paragraph in enumerate(doc.paragraphs):
        full_text = ''.join(run.text for run in paragraph.runs).strip()
        if pattern.search(full_text):
            start_index = i
            break

    if start_index is not None:
        # –í–∏–¥–∞–ª—è—î–º–æ –∞–±–∑–∞—Ü–∏ –ø—ñ—Å–ª—è –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ —Ä–æ–∑–¥—ñ–ª—É
        for i in reversed(range(start_index + 1, len(doc.paragraphs))):
            doc.paragraphs[i]._element.getparent().remove(doc.paragraphs[i]._element)

        # –í–∏–¥–∞–ª—è—î–º–æ —Ç–∞–±–ª–∏—Ü—ñ, —è–∫—ñ —Ä–æ–∑—Ç–∞—à–æ–≤–∞–Ω—ñ –ø—ñ—Å–ª—è start_index
        for table in reversed(doc.tables):
            if table._element.getparent().index(table._element) > start_index:
                table._element.getparent().remove(table._element)

def append_dyploma_with_formatting(original_path, dyploma_path):
    try:
        temp_path = original_path.replace(".docx", "_temp.docx")
        shutil.copyfile(original_path, temp_path)
        base_doc = Document(temp_path)
        composer = Composer(base_doc)
        dyploma_doc = Document(dyploma_path)
        composer.append(dyploma_doc)
        composer.save(original_path)
        os.remove(temp_path)
        print(f"üìé –í—Å—Ç–∞–≤–ª–µ–Ω–æ dyploma.docx —É {os.path.basename(original_path)}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ dyploma.docx —É {os.path.basename(original_path)}: {str(e)}")

def process_docx(file_path, dyploma_path):
    try:
        doc = Document(file_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ {file_path}: {str(e)}")
        return

    for paragraph in doc.paragraphs:
        replace_text_in_paragraph(paragraph, doc)

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                replace_text_in_cell(cell, doc)

    delete_after_section(doc)

    try:
        doc.save(file_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ {file_path}: {str(e)}")
        return

    if os.path.exists(dyploma_path):
        append_dyploma_with_formatting(file_path, dyploma_path)
    else:
        print(f"‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª dyploma.docx –∑–∞ —à–ª—è—Ö–æ–º {dyploma_path}")

    print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {os.path.basename(file_path)}")

# üîÅ –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤
for filename in os.listdir(folder_path):
    if filename.endswith('.docx') and not filename.startswith('~$'):
        full_path = os.path.join(folder_path, filename)
        print(f"\nüìÑ –ü–æ—á–∏–Ω–∞—î–º–æ: {filename}")
        process_docx(full_path, dyploma_path)
