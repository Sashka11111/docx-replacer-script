import os
import re
import shutil
from docx import Document
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.shared import Pt, RGBColor, Inches
from docxcompose.composer import Composer

# üî∑ –®–ª—è—Ö–∏
folder_path = r"C:\Users\1\Desktop\–ó–í-41"
dyploma_path = r"C:\Users\1\Desktop\dyploma.docx"

replacements = {
    '–ù–∞–∑–≤–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å': '–ù–∞–∑–≤–∞ –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—ó —Ç–∞ –ø—Ä–∏—Å–≤–æ—î–Ω–∏–π –æ—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å (–º–æ–≤–æ—é –æ—Ä–∏–≥—ñ–Ω–∞–ª—É)',
    'Name of qualification and (if applicable) title conferred': 'Name of educational qualification and educational-professional degree conferred (in original language)',
    '–°—Ç—É–ø—ñ–Ω—å –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏': '–û—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π —Å—Ç—É–ø—ñ–Ω—å —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Degree': 'Professional pre-higher education educational-professional degree',
    '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ä–∞–∑—ñ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è)': '–û—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –ø—Ä–æ–≥—Ä–∞–º–∞',
    'Professional Qualification (if awarded)': 'Educational-professional programme',
#–ü–æ–º—ñ—á–∞–Ω–Ω—è: —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –±—ñ–ª—å—à–µ –∑–∞–º—ñ–Ω
    '–§–∞—Ö—ñ–≤–µ—Ü—å –∑ –≥–µ–æ–¥–µ–∑—ñ—ó —Ç–∞ –∑–µ–º–ª–µ—É—Å—Ç—Ä–æ—é': '–ó–µ–º–ª–µ–≤–ø–æ—Ä—è–¥–∫—É–≤–∞–Ω–Ω—è',
    'Specialist in geodesy and land management': 'Land management',

    '–û—Å–Ω–æ–≤–Ω–∞	(–æ—Å–Ω–æ–≤–Ω—ñ)	–≥–∞–ª—É–∑—å	(–≥–∞–ª—É–∑—ñ)	–∑–Ω–∞–Ω—å	–∑–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—î—é': '–ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∞ –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ä–∞–∑—ñ –ø—Ä–∏—Å–≤–æ—î–Ω–Ω—è)',
    'Main field(s) of study for the qualification': 'Professional qualification (if awarded)',
    '19 –ê—Ä—Ö—ñ—Ç–µ–∫—Ç—É—Ä–∞ —Ç–∞ –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤–æ': '–§–∞—Ö—ñ–≤–µ—Ü—å –∑ –≥–µ–æ–¥–µ–∑—ñ—ó —Ç–∞ –∑–µ–º–ª–µ—É—Å—Ç—Ä–æ—é',
    '19 Architecture and Construction': 'Specialist in geodesy and land management',
    '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è —ñ —Å—Ç–∞—Ç—É—Å –∑–∞–∫–ª–∞–¥—É (—è–∫—â–æ –≤—ñ–¥–º—ñ–Ω–Ω—ñ –≤—ñ–¥ –ø. 2.3), —è–∫–∏–π —Ä–µ–∞–ª—ñ–∑—É—î –æ—Å–≤—ñ—Ç–Ω—é –ø—Ä–æ–≥—Ä–∞–º—É': '',
    'Name and status of institution (if different from 2.3)': '',
    'administering studies': '',
    '–ó–∞–∑–Ω–∞—á–µ–Ω–æ —É –ø—É–Ω–∫—Ç—ñ 2.3': '',
    'Specified in 2.3': '',
    '2.5': '2.4',
    '6.2.5': '6.2.5',
    '–ü–†–û –†–Ü–í–ï–ù–¨ –ö–í–ê–õ–Ü–§–Ü–ö–ê–¶–Ü–á': '–ü–†–û –ö–í–ê–õ–Ü–§–Ü–ö–ê–¶–Ü–Æ',
    'INFORMATION ON THE LEVEL AND DURATION OF THE QUALIFICATION': 'INFORMATION ON THE LEVEL OF QUALIFICATION AND LENGTH OF PROGRAMME',

    '–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö —Ç–∞/–∞–±–æ —Ä–æ–∫–∞—Ö': '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –æ—Å–≤—ñ—Ç–Ω—å–æ-–ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏ –≤ –∫—Ä–µ–¥–∏—Ç–∞—Ö —Ç–∞/–∞–±–æ —Ä–æ–∫–∞—Ö',
    'Official duration of programme in credits and/or years': 'Official length of educational-professional programme in credits and/or years',
    '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–í–ï–†–®–ï–ù–£ –û–°–í–Ü–¢–ù–Æ –ü–†–û–ì–†–ê–ú–£ –¢–ê –ó–î–û–ë–£–¢–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ù–ê–í–ß–ê–ù–ù–Ø': '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ó–ê–í–ï–†–®–ï–ù–£ –û–°–í–Ü–¢–ù–¨–û-–ü–†–û–§–ï–°–Ü–ô–ù–£ –ü–†–û–ì–†–ê–ú–£ –¢–ê –ó–î–û–ë–£–¢–Ü –†–ï–ó–£–õ–¨–¢–ê–¢–ò –ù–ê–í–ß–ê–ù–ù–Ø',
    'INFORMATION ON THE PROGRAMME COMPLETED AND THE RESULTS OBTAINED': 'INFORMATION ON THE COMPLETED EDUCATIONAL-PROFESSIONAL PROGRAMME AND LEARNING OUTCOMES',
    '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–∏—Ö —É—Å—Ç–∞–Ω–æ–≤) (–≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –∑–∞–∫–ª–∞–¥—ñ–≤ –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏), —É —è–∫–∏—Ö –∑–¥–æ–±—É–≤–∞–ª–∞—Å—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ç–æ–º—É —á–∏—Å–ª—ñ –∑–∞–∫–ª–∞–¥–∏ –æ—Å–≤—ñ—Ç–∏, –≤ —è–∫–∏—Ö –∑–¥–æ–±—É–≤–∞—á –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ –≤–∏–≤—á–∞–≤ –æ–∫—Ä–µ–º—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ—ó –º–æ–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)': '–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–∫–ª–∞–¥—ñ–≤ —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤ –∞–±–æ —Ñ—ñ–ª—ñ–π –∑–∞–∫–ª–∞–¥—ñ–≤ —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏), —É —è–∫–∏—Ö –∑–¥–æ–±—É–≤–∞–ª–∞—Å—è –æ—Å–≤—ñ—Ç–Ω—è –∫–≤–∞–ª—ñ—Ñ—ñ–∫–∞—Ü—ñ—è (—É —Ç–æ–º—É —á–∏—Å–ª—ñ –∑–∞–∫–ª–∞–¥–∏ –æ—Å–≤—ñ—Ç–∏, –≤ —è–∫–∏—Ö –∑–¥–æ–±—É–≤–∞—á —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ –≤–∏–≤—á–∞–≤ –æ–∫—Ä–µ–º—ñ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∏ –∑–∞ –ø—Ä–æ–≥—Ä–∞–º–∞–º–∏ –∞–∫–∞–¥–µ–º—ñ—á–Ω–æ—ó –º–æ–±—ñ–ª—å–Ω–æ—Å—Ç—ñ)',
    'Name of all higher education (research) institutions (separate structural units of higher education institutions) where the qualification has been gained (including education institutions where the holder of the qualification has been studying separate course units within the framework(s) of': 'Names of all professional pre-higher education institutions (professional pre-higher education institutions separate structural units or branches) the qualification was gained in (including education institutions where the student of professional pre-higher education  studied separate course units within the framework of academic mobility programme)',
    'academic mobility)': '',
    '–∑–∞–∫–ª–∞–¥—É	–≤–∏—â–æ—ó	–æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∏)': '–∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (—ñ–Ω—à–æ–≥–æ —Å—É–±‚Äô—î–∫—Ç–∞ –æ—Å–≤—ñ—Ç–Ω—å–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ)',
    'institution':'',
    'Contact information of the higher education (research)':'Contact information of the professional pre-higher education institution (other educational entity)',
    '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –∞–±–æ —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∞ –æ—Å–æ–±–∞ –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏': '–ö–µ—Ä—ñ–≤–Ω–∏–∫ –∞–±–æ —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–∞ –æ—Å–æ–±–∞ –∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Capacity': 'Head or other authorized person of professional pre-higher education institution',
    '–ü–æ—Å–∞–¥–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∞–±–æ —ñ–Ω—à–æ—ó —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ—ó –æ—Å–æ–±–∏ –∑–∞–∫–ª–∞–¥—É –≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏ (–Ω–∞—É–∫–æ–≤–æ—ó —É—Å—Ç–∞–Ω–æ–≤–∏)': '–ü–æ—Å–∞–¥–∞ –∫–µ—Ä—ñ–≤–Ω–∏–∫–∞ –∞–±–æ —ñ–Ω—à–æ—ó —É–ø–æ–≤–Ω–æ–≤–∞–∂–µ–Ω–æ—ó –æ—Å–æ–±–∏ –∑–∞–∫–ª–∞–¥—É —Ñ–∞—Ö–æ–≤–æ—ó –ø–µ—Ä–µ–¥–≤–∏—â–æ—ó –æ—Å–≤—ñ—Ç–∏',
    'Position of the Head or another authorized person of the Higher Education (Research) Institution': 'Position of the professional pre-higher education institution head or other authorized person',
    '–ü–µ—á–∞—Ç–∫–∞': '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –ø–µ—á–∞—Ç–∫–∞',
    'Official stamp or seal': 'Official Seal',
    '8. –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£ –°–ò–°–¢–ï–ú–£ –í–ò–©–û–á –û–°–í–Ü–¢–ò': '',
    '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –°–ò–°–¢–ï–ú–£ –§–ê–•–û–í–û–á –ü–ï–†–ï–î–í–ò–©–û–á –û–°–í–Ü–¢–ò': '',
}

keys_to_format = [
    '–û—Ñ—ñ—Ü—ñ–π–Ω–∞ –ø–µ—á–∞—Ç–∫–∞',
    'Official Seal',
]
no_line_break_keys = keys_to_format

def replace_text_in_paragraph(paragraph, doc):
    runs = paragraph.runs
    if not runs:
        return True

    # –û–±'—î–¥–Ω—É—î–º–æ —Ç–µ–∫—Å—Ç —É—Å—ñ—Ö runs —É –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ
    full_text = ''.join(run.text for run in runs)
    original_text = full_text

    # –í–∏–∫–æ–Ω—É—î–º–æ –≤—Å—ñ –∑–∞–º—ñ–Ω–∏ –≤ –æ–±'—î–¥–Ω–∞–Ω–æ–º—É —Ç–µ–∫—Å—Ç—ñ
    for old, new in replacements.items():
        full_text = full_text.replace(old, new)

    if full_text != original_text:
        print(f"üìù –ó–∞–º—ñ–Ω–µ–Ω–æ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ:\n  –î–æ: {original_text}\n  –ü—ñ—Å–ª—è: {full_text}")

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–∞—Ä–∞–≥—Ä–∞—Ñ (—è–∫—â–æ –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç –ø–æ—Ä–æ–∂–Ω—ñ–π)
        if full_text.strip() == '':
            # –ù–µ –≤–∏–¥–∞–ª—è—î–º–æ, —è–∫—â–æ —Ç–µ–∫—Å—Ç –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "4.3" –∞–±–æ "4.4" (–∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
            if not original_text.startswith(("4.3", "4.4")):
                paragraph._element.getparent().remove(paragraph._element)
                return False
        else:
            # –û—á–∏—â–∞—î–º–æ –≤—Å—ñ runs
            for run in runs:
                run.text = ''

            # –î–æ–¥–∞—î–º–æ –Ω–æ–≤–∏–π run –∑ –Ω–æ–≤–∏–º —Ç–µ–∫—Å—Ç–æ–º
            new_run = paragraph.add_run(full_text)

            # –ö–æ–ø—ñ—é—î–º–æ —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∑ –ø–µ—Ä—à–æ–≥–æ run
            first_run = runs[0]
            new_run.font.name = first_run.font.name
            new_run.font.size = first_run.font.size
            new_run.font.bold = first_run.font.bold
            new_run.font.italic = first_run.font.italic
            if first_run.font.color and first_run.font.color.rgb:
                new_run.font.color.rgb = first_run.font.color.rgb

            # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
            if any(key in full_text for key in keys_to_format):
                paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    return True
    runs = paragraph.runs
    if not runs:
        return True

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ run –æ–∫—Ä–µ–º–æ
    changed = False
    needs_formatting = False
    original_texts = [run.text for run in runs if run.text]  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —Ç–µ–∫—Å—Ç

    for run in runs:
        run_text = run.text
        if not run_text:
            continue
        for old, new in replacements.items():
            if old in run_text:
                run_text = run_text.replace(old, new)
                changed = True
                if old in keys_to_format or new in keys_to_format:
                    needs_formatting = True
        run.text = run_text

    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–∞—Ä–∞–≥—Ä–∞—Ñ–∞
    full_text = ''.join(run.text for run in runs).strip()
    for old, new in replacements.items():
        if new == '' and old == full_text:  # –¢–æ—á–Ω–∏–π –∑–±—ñ–≥ —É—Å—å–æ–≥–æ —Ç–µ–∫—Å—Ç—É
            if full_text.startswith("4.3") or full_text.startswith("4.4"):
                continue
            paragraph._element.getparent().remove(paragraph._element)
            return False

    if changed:
        print(f"üìù –ó–∞–º—ñ–Ω–µ–Ω–æ –≤ –ø–∞—Ä–∞–≥—Ä–∞—Ñ—ñ:\n  –î–æ: {''.join(original_texts)}\n  –ü—ñ—Å–ª—è: {full_text}")

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∏–ª—ñ –∑ –ø–µ—Ä—à–æ–≥–æ run
        first_run = runs[0]
        font_name = first_run.font.name
        font_size = first_run.font.size
        font_bold = first_run.font.bold
        font_italic = first_run.font.italic
        font_color = first_run.font.color.rgb if first_run.font.color and first_run.font.color.rgb else None

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ —Å—Ç–∏–ª—ñ –¥–æ –≤—Å—ñ—Ö run
        for run in runs:
            run.font.name = font_name
            run.font.size = font_size
            run.font.bold = font_bold
            run.font.italic = font_italic
            if font_color:
                run.font.color.rgb = font_color

        # –ó–∞—Å—Ç–æ—Å–æ–≤—É—î–º–æ –≤–∏—Ä—ñ–≤–Ω—é–≤–∞–Ω–Ω—è, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
        if needs_formatting and full_text not in no_line_break_keys:
            paragraph.alignment = WD_ALIGN_PARAGRAPH.JUSTIFY

    return True

def remove_page_break_before_625(doc):
    pattern = re.compile(r'\b6\.2\.5\b')
    for i in range(1, len(doc.paragraphs)):
        paragraph = doc.paragraphs[i]
        if pattern.search(paragraph.text):
            prev_para = doc.paragraphs[i - 1]
            # –Ø–∫—â–æ –≤ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–º—É –∞–±–∑–∞—Ü—ñ —î —Ç—ñ–ª—å–∫–∏ —Ä–æ–∑—Ä–∏–≤ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ ‚Äî –≤–∏–¥–∞–ª–∏—Ç–∏ –π–æ–≥–æ
            if any('pageBreakBefore' in run._element.xml for run in prev_para.runs) or prev_para.text.strip() == '':
                print(f"‚úÇÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑—Ä–∏–≤ –ø–µ—Ä–µ–¥ '6.2.5'")
                prev_para._element.getparent().remove(prev_para._element)
            break


def replace_text_in_cell(cell, doc):
    for paragraph in cell.paragraphs:
        replace_text_in_paragraph(paragraph, doc)

def delete_after_section(doc):
    pattern = re.compile(r'–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø\s*–ü–†–û\s*–ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£\s*–°–ò–°–¢–ï–ú–£\s*–í–ò–©–û–á', re.IGNORECASE | re.UNICODE)
    start_index = None
    for i, paragraph in enumerate(doc.paragraphs):
        full_text = ''.join(run.text for run in paragraph.runs).strip()
        if pattern.search(full_text):
            start_index = i
            break

    if start_index is not None:
        try:
            for i in reversed(range(start_index + 1, len(doc.paragraphs))):
                doc.paragraphs[i]._element.getparent().remove(doc.paragraphs[i]._element)
            for table in reversed(doc.tables):
                if table._element.getparent().index(table._element) > start_index:
                    table._element.getparent().remove(table._element)
            print("üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Ä–æ–∑–¥—ñ–ª–∏ –ø—ñ—Å–ª—è '–Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ù–ê–¶–Ü–û–ù–ê–õ–¨–ù–£ –°–ò–°–¢–ï–ú–£ –í–ò–©–û–á –û–°–í–Ü–¢–ò'")
        except Exception as e:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ä–æ–∑–¥—ñ–ª—É: {str(e)}")

def append_dyploma_with_formatting(original_path, dyploma_path):
    try:
        if not os.path.exists(dyploma_path):
            print(f"‚ùå –§–∞–π–ª dyploma.docx –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ —à–ª—è—Ö–æ–º {dyploma_path}")
            return

        temp_path = original_path.replace(".docx", "_temp.docx")
        shutil.copyfile(original_path, temp_path)
        try:
            base_doc = Document(temp_path)
            composer = Composer(base_doc)
            dyploma_doc = Document(dyploma_path)
            composer.append(dyploma_doc)
            composer.save(original_path)
            print(f"üìé –í—Å—Ç–∞–≤–ª–µ–Ω–æ dyploma.docx —É {os.path.basename(original_path)}")
        finally:
            if os.path.exists(temp_path):
                os.remove(temp_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—Å—Ç–∞–≤–∫–∏ dyploma.docx —É {os.path.basename(original_path)}: {str(e)}")

def process_docx(file_path, dyploma_path):
    try:
        if not os.access(file_path, os.R_OK | os.W_OK):
            print(f"‚ùå –ù–µ–º–∞—î –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø—É –¥–æ {os.path.basename(file_path)}")
            return

        doc = Document(file_path)
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–∫—Ä–∏—Ç—Ç—ñ {os.path.basename(file_path)}: {str(e)}")
        return

    for paragraph in doc.paragraphs:
        if not replace_text_in_paragraph(paragraph, doc):
            continue

    for table in doc.tables:
        for row in table.rows:
            for cell in row.cells:
                replace_text_in_cell(cell, doc)
    remove_page_break_before_625(doc)
    delete_after_section(doc)

    try:
        doc.save(file_path)
        print(f"üíæ –ó–±–µ—Ä–µ–∂–µ–Ω–æ: {os.path.basename(file_path)}")
    except Exception as e:
        print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ {os.path.basename(file_path)}: {str(e)}")
        return

    append_dyploma_with_formatting(file_path, dyploma_path)

    print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ: {os.path.basename(file_path)}")

try:
    if not os.path.exists(folder_path):
        print(f"‚ùå –ü–∞–ø–∫–∞ {folder_path} –Ω–µ —ñ—Å–Ω—É—î")
    else:
        for filename in os.listdir(folder_path):
            if filename.endswith('.docx') and not filename.startswith('~$'):
                full_path = os.path.join(folder_path, filename)
                print(f"\nüìÑ –ü–æ—á–∏–Ω–∞—î–º–æ: {filename}")
                process_docx(full_path, dyploma_path)
        print("\nüéâ –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —Ñ–∞–π–ª—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
except Exception as e:
    print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç—É–ø—ñ –¥–æ –ø–∞–ø–∫–∏ {folder_path}: {str(e)}")
